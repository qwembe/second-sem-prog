#ifndef LIST_H
#define LIST_H
typedef int T;

// Элемент списка
    typedef struct Node_ {
        T val_;
        struct Node* next_;
        struct Node* prev_;
    } Node;

    // Список
    typedef struct List_ {
        Node* head_; // Указатель на голову списка
        Node* cur_;  // Указатель на текущий элемент
    } List;

// Возвращает 1, если список пуст, иначе - 0
int empty(const List* list);

// Возвращает количество элементов в списке
int size(const List* list);

// Установить текущим элементом голову списка, возвращает 0, если текущий
// элемент установлен, -1, если список пуст
int head(List* list);

// Перейти к следующему элементу списка, возвращает 0, если текущий элемент
// установлен, -1, если список пуст или текущий элемент - последний
int next(List* list);

// Перейти к предыдущему элементу списка, возвращает 0, если текущий
// элемент установлен, -1, если список пуст или текущий элемент - голова
int prev(List* list);

// Получить значение текущего элемента, возвращает 0, если текущий элемент
// существует, -1, если список пуст
int get(List* list, T* val);

// Установить значение текущего элемента, возвращает 0, если текущий элемент
// существует, -1, если список пуст
int set(List* list, T val);

// Добавить новый элемент перед текущим элементом, возвращает 0, если элемент
// добавлен, -1, если malloc вернула NULL
int insert_before(List* list, T val);


// Добавить новый элемент после текущего элемента, возвращает 0, если элемент
// добавлен, -1, если malloc вернула NULL
int insert_after(List* list, T val);

// Удалить текущий элемент, возвращает 0, если элемент удален, -1, если список пуст
int erase(List* list);

// Удаляет все элементы из списка
void destroy(List* list);

//Инициализация списка. Создает первые пять элементов и заполняет их квадратами чисел
int init(List* list);

//Выводит на экран содержимое списка
int print(List* list);

//Создаёт новый список.
int createNew(List* list);

#endif //LIST_H
